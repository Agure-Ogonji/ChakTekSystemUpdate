@implements IDisposable

@if (allStates.ShowCountry)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">Countries</h4>
						<button class="btn btn-outline-success float-end" @onclick="OpenDialog">
							<i class="bi bi-plus-circle-dotted"></i>
							Add Country
						</button>
					</div>
					<div class="crad-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">Id</th>
										<th scope="col">Country</th>
										<th scope="col">Action</th>
									</tr>
								</thead>

								<tbody>
									@if (Countries is not null)
									{
										int count = 1;
										foreach (var item in Countries)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.Id</td>
												<td>@item.Name</td>
												<td>
													<i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)"></i>
													<i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
												</td>
											</tr>
											count++;

										}
									}
									else
									{
										<tr>
											<td colspan="4"><div class="alert alert-info text-center">THERE IS NO COUNTRY ADDED AS OF YET.</div></td>
										</tr>
									}
								</tbody>

							</table>
						</div>
					</div>
				</div>
			</div>
		</div>

	</div>

}

<style>
	.cursorStyle {
		cursor: pointer;
	}
</style>
<CountryDialog @ref="countryDialog" HandleSaveOperationEvent="HandleSaveOperationEvent" Country="Country" />

@code {

	public string Title { get; set; } = "Add";
	CountryDialog? countryDialog;
	Country Country = new();

	// public List<Department> Departments { get; set; } = new();
	public List<Country> Countries { get; set; } = new();
	protected override async Task OnInitializedAsync()
	{
		await GetCountries();
		// await GetDepartments();
		allStates.Action += StateHasChanged;
	}
	private async Task GetCountries()
	{
		Countries = await countryService.GetAll(Constants.CountryBaseUrl);
	}

	void AddButtonClicked()
	{
		countryDialog?.ChangeTitle("Add");
		Country = new();
		OpenDialog();
	}
	void OpenDialog()
	{
		countryDialog?.OpenDialog();
	}

	//ADD OR UPDATE
	private async Task HandleSaveOperationEvent(Country country)
	{
		bool successCheck = false;
		if (country.Id > 0)
		{
			var result = await countryService.Update(country, Constants.CountryBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}

		else
		{
			var response = await countryService.Insert(Country, Constants.CountryBaseUrl);
			successCheck = await DisplayMessage(response.Flag, response.Message);
		}
		if (successCheck)
		{
			Country = new();
			await GetCountries();
			countryDialog?.ChangeTitle("Add");
		}
	}

	//EDIT
	private void EditClicked(Country country)
	{
		countryDialog?.ChangeTitle("Update");
		Country = country;
		OpenDialog();
	}
	//DELETE
	private async Task DeleteClicked(Country country)
	{
		bool confirm = await dialogService.ConfirmAsync($"ARE YOU SURE YOU WANT TO DELETE {country.Name}?", "CONFIRM DELETE");
		if (!confirm) return;
		var response = await countryService.DeleteById(country.Id, Constants.CountryBaseUrl);
		if (await DisplayMessage(response.Flag, response.Message))
			await GetCountries();
	}
	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "THE OPERATION IS A SUCCESS");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "ALERT");
			return false;

		}
	}
	public void Dispose()
	{
		allStates.Action -= StateHasChanged;
	}

}