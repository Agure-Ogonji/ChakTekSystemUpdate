@implements IDisposable
@if(allStates.ShowEmployee){
	if(ShowMainPage){
		<div class="container-fluid mt-5">

			<div class="row">
				<div class="col-lg-12">
					<div class="card">
						<div class="card-header">
							<button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
								<i class="bi bi-plus-circle-dotted"></i>
								Add Employee
							</button>
						</div>
						<div class="card-body">
							@{
								var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
							}
							<SfGrid DataSource="@Employees" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
								<GridColumns>
									<GridColumn HeaderText="Employee Image">
										<Template>
											@{
												var employee = (context as Employee);
												<div class="image">
													<img src="@employee!.Photo" alt="@employee.Name" width="150" height="150"/>
												</div>
											}
										</Template>
									</GridColumn>
									<GridColumn Field="@nameof(Employee.CivilId)" HeaderText="Civil ID"></GridColumn>
									<GridColumn Field="@nameof(Employee.FileNumber)" HeaderText="File Number"></GridColumn>
									<GridColumn Field="@nameof(Employee.Name)" HeaderText="Name"></GridColumn>
									<GridColumn Field="@nameof(Employee.TelephoneNumber)" HeaderText="Telephone"></GridColumn>
									<GridColumn Field="@nameof(Employee.JobName)" HeaderText="Job Name"></GridColumn>
									@* <GridColumn Field="@nameof(Employee.Branch)" HeaderText="Branch"></GridColumn> *@
									@* <GridColumn Field="@nameof(EmployeeDetails.Branch.Name)" HeaderText="Branch"></GridColumn> *@
									@* <GridColumn Field="@nameof(Employee.Town)" HeaderText="Town"></GridColumn> *@
									<GridColumn HeaderTextAlign="TextAlign.Left" HeaderText="Menu">
										<Template>
											@{
												var employee = (context as Employee);
												<i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopUp(employee!)"></i>
											}
										</Template>
									</GridColumn>
								</GridColumns>
							</SfGrid>
						</div>
						<div class="card-footer"></div>
					</div>
				</div>
			</div>
		</div>
	}
}

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee" Employee="Employee" ShowAddOrUpdateEmployee="ShowAddOrUpdatePage" NotifyParentFormCloseClicked="NotifyParentFormCloseClicked" Countries="DefaultCountries" Cities="SelectedCities" Towns="SelectedTowns" GeneralDepartments="DefaultGeneralDepartments" Departments="SelectedDepartments" Branches="SelectedBranches" HandleCountrySelectedEvent="HandleCountrySelectedEvent" HandleCitySelectedEvent="HandleCitySelectedEvent" HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent" HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent" HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" />
<EmployeeDetailsPage EmployeeDetails="Employee" ShowDetailsPage="ShowDetailsPage" HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />
<ContextMenu @ref="contextMenu" HandleDeleteClicked="DeleteClicked" HandleEditClicked="EditClicked" HandleViewClicked="ViewClicked" HandleAddHealthClicked="AddHealthClicked" HandleAddOvertimeClicked="AddOvertimeClicked" HandleAddSanctionClicked="AddSanctionClicked" HandleAddVacationClicked="AddVacationClicked" />
<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent"/>
<OvertimeDialog @ref="overtimeDialog" ItemModel="Overtime" OvertimeTypes="OvertimeTypes" HandleSaveOperationEvent="SaveOvertimeEvent" />
<SanctionDialog @ref="sanctionDialog" ItemModel="Sanction" SanctionTypes="SanctionTypes" HandleSaveOperationEvent="SaveSanctionEvent" />
<VacationDialog @ref="vacationDialog" ItemModel="Vacation" VacationTypes="VacationTypes" HandleSaveOperationEvent="SaveVacationEvent" />
@code {
	private SfGrid<Employee>? DefaultGrid;
	AddOrUpdateEmployeePage? addOrUpdateEmployee;

	public List<Employee> Employees { get; set; } = [];
	public Employee Employee { get; set; } = new();

	// [Parameter] public Employee EmployeeDetails { get; set; } = new();

	//COUNTRIES, CITIES AND TOWNS
	public List<Country> DefaultCountries { get; set; } = [];
	public List<City> DefaultCities { get; set; } = [];
	public List<Town> DefaultTowns { get; set; } = [];


	//GENERAL DEPARTMENT, DEPARTMENT AND BRANCH
	public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
	public List<Department> DefaultDepartments { get; set; } = [];
	public List<Branch> DefaultBranches { get; set; } = [];

	public List<Department> SelectedDepartments { get; set; } = [];
	public List<Branch> SelectedBranches { get; set; } = [];
	public List<City> SelectedCities { get; set; } = [];
	public List<Town> SelectedTowns { get; set; } = [];

	// private async Task LoadEmployees()
	// {
	// 	Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
	// }
	protected async override Task OnInitializedAsync()
	{
		allStates.Action += StateHasChanged;
		// await LoadDefaults();
		await LoadEmployees();
		await LoadDefaults();
		await GetOvertimeTypes();
		await GetSanctionTypes();
		await GetVacationTypes();
	}


	private async Task LoadDefaults()
	{
		DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
		DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
		DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);


		DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
		DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
		DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
	}

	//COUNTRY SELECT
	private void HandleCountrySelectedEvent(int countryId) => SelectedCities = DefaultCities.Where(c => c.CountryId == countryId).ToList();	
	//CITY SELECT
	private void HandleCitySelectedEvent(int cityId) => SelectedTowns = DefaultTowns.Where(t => t.CityId == cityId).ToList();	
	//GENERAL DEPARTMENT SELECT
	private void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) => SelectedDepartments = DefaultDepartments.Where(gd => gd.GeneralDepartmentId == generalDepartmentId).ToList();
	//DEPARTMENT SELECT
	private void HandleDepartmentSelectedEvent(int departmentId) => SelectedBranches = DefaultBranches.Where(d => d.DepartmentId == departmentId).ToList();
	//NOTIFY THE PARENT WHEN THE ADD OR UPDATE FORM CLOSES
	private async Task NotifyParentFormCloseClicked()
	{
		ShowMainPage = true;
		ShowAddOrUpdatePage = false;
		await LoadEmployees();
		SelectedEmployee = new();
	}
	//LOADING EMPLOYEES
	private async Task LoadEmployees() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

	//SAVE EMPLOYEES
	async Task HandleSaveEmployeeClickedEvent(Employee employee)
	{
		bool successCheck = false;
		if(employee.Id > 0)
		{
			var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
			successCheck = await DisplayMessage(response.Flag, response.Message);
		}
		if (successCheck)
		{
			addOrUpdateEmployee!.ClearContent();
		}
	}
	public bool ShowMainPage { get; set; } = true;
	public bool ShowAddOrUpdatePage { get; set; } = false;
	void ShowAddOrUpdateEmployeeButtonClicked()
	{
		ShowMainPage = false;
		ShowAddOrUpdatePage = true;
	}


	//CONTEXT MENU, SHOW MENU POPUP

	ContextMenu? contextMenu;
	public Employee SelectedEmployee { get; set; } = new();
	void ShowMenuPopUp(Employee employee)
	{
		SelectedEmployee = employee;
		contextMenu!.OpenContextMenu();
	}

	//EDIT CLICKED
	void EditClicked()
	{
		//EMPLOYEEGROUP1
		addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
		addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
		addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
		addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
		addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
		addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
		addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

		//EMPLOYEEGROUP2

		addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
		addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other;
		//GENERAL DEPARTMENT, DEPARTMENT, BRANCH
		addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
		addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name;
		addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Department!.Name;

		//COUNTRY, CITY AND TOWN

		addOrUpdateEmployee!.Country = SelectedEmployee.Town!.City!.Country!.Name;
		addOrUpdateEmployee!.City = SelectedEmployee.Town!.City!.Name;
		addOrUpdateEmployee!.Town = SelectedEmployee.Town!.Name;

		//TITLE
		addOrUpdateEmployee.Title = "Update";
		SelectedEmployee = new();
		contextMenu!.CloseContextMenu();
		ShowAddOrUpdatePage = true;
		ShowMainPage = false;
	}
	//DELETE CLICKED
	private async Task DeleteClicked()
	{
		contextMenu!.CloseContextMenu();
		bool confirm = await dialogService.ConfirmAsync($"ARE YOU SURE YOU WANT TO DELETE {SelectedEmployee.Name}?", "CONFIRM DELETE");
		if (!confirm) return;

		var response = await branchService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
		var result = await DisplayMessage(response.Flag, response.Message);
		if (result)
		{
			SelectedEmployee = new();
			await LoadEmployees();
		}
	}

	public bool ShowDetailsPage { get; set; } = false;


	//VIEW CLICKED
	private void ViewClicked()
	{
		Employee = SelectedEmployee;
		contextMenu!.CloseContextMenu();
		ShowDetailsPage = true;
		ShowMainPage = false;
		SelectedEmployee = new();
	}

	private async Task GetOvertimeTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
	private async Task GetSanctionTypes() => SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);
	private async Task GetVacationTypes() => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);
	//ADD HEALTH CLICKED
	DoctorDialog? doctorDialog;
	Doctor Doctor = new();
	private void AddHealthClicked()
	{
		Doctor.EmployeeId = SelectedEmployee.Id;
		contextMenu!.CloseContextMenu();
		doctorDialog!.OpenDialog();
	}
	//ADD OVERTIME CLICKED
	OvertimeDialog? overtimeDialog;
	Overtime Overtime = new();
	List<OvertimeType> OvertimeTypes = [];
	private void AddOvertimeClicked()
	{
		Overtime.EmployeeId = SelectedEmployee.Id;
		contextMenu!.CloseContextMenu();
		overtimeDialog!.OpenDialog();
	}
	//SAVE OVERTIME
	async Task SaveOvertimeEvent(Overtime item)
	{
		item.EmployeeId = SelectedEmployee.Id;
		var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
		var response = await DisplayMessage(flag, message);
		if (response)
		{
			SelectedEmployee = new();
			Overtime = new();
			overtimeDialog!.CloseDialog();
		}
	}
	//ADD VACATION CLICKED
	VacationDialog? vacationDialog;
	Vacation Vacation = new();
	List<VacationType> VacationTypes = [];
	private void AddVacationClicked()
	{
		Vacation.EmployeeId = SelectedEmployee.Id;
		contextMenu!.CloseContextMenu();
		vacationDialog!.OpenDialog();
	}
	//ADD SANCTION CLICKED
	SanctionDialog? sanctionDialog;
	Sanction Sanction = new();
	List<SanctionType> SanctionTypes = [];
	private void AddSanctionClicked()
	{
		Sanction.EmployeeId = SelectedEmployee.Id;
		contextMenu!.CloseContextMenu();
		sanctionDialog!.OpenDialog();
	}

	//SAVE VACATION HANDLER
	async Task SaveVacationEvent(Vacation item)
	{
		item.EmployeeId = SelectedEmployee.Id;
		var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
		var response = await DisplayMessage(flag, message);
		if (response)
		{
			SelectedEmployee = new();
			Vacation = new();
			vacationDialog!.CloseDialog();
		}
	}
	//SAVE SANCTION HANDLER
	async Task SaveSanctionEvent(Sanction item)
	{
		item.EmployeeId = SelectedEmployee.Id;
		var (flag, message) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
		var response = await DisplayMessage(flag, message);
		if (response)
		{
			SelectedEmployee = new();
			Sanction = new();
			sanctionDialog!.CloseDialog();
		}
	}	
	
	//SAVE HEALTH HANDLER
	async Task SaveHealthEvent(Doctor item)
	{
		item.EmployeeId = SelectedEmployee.Id;
		var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
		var response = await DisplayMessage(flag, message);
		if (response)
		{
			SelectedEmployee = new();
			Doctor = new();
			doctorDialog!.CloseDialog();
		}
	}
	//DETAILS EMPLOYEE CLOSE BTN CLICKED
	void HandleDetailsPageCloseBtnClicked()
	{
		ShowDetailsPage = false;
		ShowMainPage = true;
	}
	//DISPLAY THE MESSAGE USING DIALOG SERVICE
	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "SUCCESS OPERATION");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "ALERT!");
			return false;
		}
	}
	//EXCEL AND PDF EXPORT
	public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
	{
		if (args.Item.Text == "Excel Export")
			await this.DefaultGrid!.ExcelExport()!;

		if (args.Item.Text == "PDF Export")
			await this.DefaultGrid!.PdfExport()!;
	}
	public void Dispose() => allStates.Action -= StateHasChanged;
}
